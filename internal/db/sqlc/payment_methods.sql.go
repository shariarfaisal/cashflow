// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_methods.sql

package db

import (
	"context"
	"database/sql"
)

const countTransactionsByPaymentMethod = `-- name: CountTransactionsByPaymentMethod :one
SELECT COUNT(*) as count FROM transactions
WHERE payment_method_id = ? AND deleted_at IS NULL
`

func (q *Queries) CountTransactionsByPaymentMethod(ctx context.Context, paymentMethodID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTransactionsByPaymentMethod, paymentMethodID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (
    name, description, is_active
) VALUES (
    ?, ?, ?
) RETURNING id, name, description, is_active, created_at, updated_at
`

type CreatePaymentMethodParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod, arg.Name, arg.Description, arg.IsActive)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivatePaymentMethod = `-- name: DeactivatePaymentMethod :exec
UPDATE payment_methods
SET
    is_active = FALSE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeactivatePaymentMethod(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deactivatePaymentMethod, id)
	return err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM payment_methods
WHERE id = ?
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, id)
	return err
}

const getPaymentMethod = `-- name: GetPaymentMethod :one
SELECT id, name, description, is_active, created_at, updated_at FROM payment_methods
WHERE id = ?
`

func (q *Queries) GetPaymentMethod(ctx context.Context, id string) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethod, id)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentMethodName = `-- name: GetPaymentMethodName :one
SELECT name FROM payment_methods
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetPaymentMethodName(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethodName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listActivePaymentMethods = `-- name: ListActivePaymentMethods :many
SELECT id, name, description, is_active, created_at, updated_at FROM payment_methods
WHERE is_active = TRUE
ORDER BY name ASC
`

func (q *Queries) ListActivePaymentMethods(ctx context.Context) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, listActivePaymentMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPaymentMethods = `-- name: ListPaymentMethods :many
SELECT id, name, description, is_active, created_at, updated_at FROM payment_methods
ORDER BY name ASC
`

func (q *Queries) ListPaymentMethods(ctx context.Context) ([]PaymentMethod, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentMethods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentMethod{}
	for rows.Next() {
		var i PaymentMethod
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :one
UPDATE payment_methods
SET
    name = ?,
    description = ?,
    is_active = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, description, is_active, created_at, updated_at
`

type UpdatePaymentMethodParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	IsActive    sql.NullBool   `json:"is_active"`
	ID          string         `json:"id"`
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentMethod,
		arg.Name,
		arg.Description,
		arg.IsActive,
		arg.ID,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
