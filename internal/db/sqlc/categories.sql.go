// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: categories.sql

package db

import (
	"context"
	"database/sql"
)

const countTransactionsByCategory = `-- name: CountTransactionsByCategory :one
SELECT COUNT(*) as count FROM transactions
WHERE category_id = ? AND deleted_at IS NULL
`

func (q *Queries) CountTransactionsByCategory(ctx context.Context, categoryID sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countTransactionsByCategory, categoryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name, type, color, icon, parent_id, is_active
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id, name, type, color, icon, parent_id, is_active, created_at, updated_at
`

type CreateCategoryParams struct {
	Name     string         `json:"name"`
	Type     string         `json:"type"`
	Color    sql.NullString `json:"color"`
	Icon     sql.NullString `json:"icon"`
	ParentID sql.NullString `json:"parent_id"`
	IsActive sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.Name,
		arg.Type,
		arg.Color,
		arg.Icon,
		arg.ParentID,
		arg.IsActive,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Color,
		&i.Icon,
		&i.ParentID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deactivateCategory = `-- name: DeactivateCategory :exec
UPDATE categories
SET
    is_active = FALSE,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeactivateCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deactivateCategory, id)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE id = ?
`

func (q *Queries) DeleteCategory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, type, color, icon, parent_id, is_active, created_at, updated_at FROM categories
WHERE id = ?
`

func (q *Queries) GetCategory(ctx context.Context, id string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Color,
		&i.Icon,
		&i.ParentID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT id, name, type, color, icon, parent_id, is_active, created_at, updated_at FROM categories
WHERE name = ? AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetCategoryByName(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryByName, name)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Color,
		&i.Icon,
		&i.ParentID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategoryName = `-- name: GetCategoryName :one
SELECT name FROM categories
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetCategoryName(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, getCategoryName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const listActiveCategories = `-- name: ListActiveCategories :many
SELECT id, name, type, color, icon, parent_id, is_active, created_at, updated_at FROM categories
WHERE is_active = TRUE
ORDER BY type, name ASC
`

func (q *Queries) ListActiveCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listActiveCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Color,
			&i.Icon,
			&i.ParentID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, type, color, icon, parent_id, is_active, created_at, updated_at FROM categories
ORDER BY type, name ASC
`

func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Color,
			&i.Icon,
			&i.ParentID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByType = `-- name: ListCategoriesByType :many
SELECT id, name, type, color, icon, parent_id, is_active, created_at, updated_at FROM categories
WHERE (type = ? OR type = 'both')
    AND is_active = TRUE
ORDER BY name ASC
`

func (q *Queries) ListCategoriesByType(ctx context.Context, type_ string) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Color,
			&i.Icon,
			&i.ParentID,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
    name = ?,
    type = ?,
    color = ?,
    icon = ?,
    parent_id = ?,
    is_active = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, name, type, color, icon, parent_id, is_active, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name     string         `json:"name"`
	Type     string         `json:"type"`
	Color    sql.NullString `json:"color"`
	Icon     sql.NullString `json:"icon"`
	ParentID sql.NullString `json:"parent_id"`
	IsActive sql.NullBool   `json:"is_active"`
	ID       string         `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.Name,
		arg.Type,
		arg.Color,
		arg.Icon,
		arg.ParentID,
		arg.IsActive,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Color,
		&i.Icon,
		&i.ParentID,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
